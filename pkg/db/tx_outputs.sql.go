// Code generated by sqlc. DO NOT EDIT.
// source: tx_outputs.sql

package db

import (
	"context"

	"github.com/handshake-labs/blockexplorer/pkg/types"
)

const getTxOutputsByTxid = `-- name: GetTxOutputsByTxid :many
SELECT DISTINCT ON(t1.index)
  t1.txid, t1.index, t1.value, t1.address, t1.covenant_action, t1.covenant_name_hash, t1.covenant_height, t1.covenant_name, t1.covenant_bid_hash, t1.covenant_nonce, t1.covenant_record_data, t1.covenant_block_hash, t1.covenant_version, t1.covenant_address, t1.covenant_claim_height, t1.covenant_renewal_count,
  COALESCE(CONVERT_FROM(t2.covenant_name, 'SQL_ASCII'), '')::text AS name
FROM
  tx_outputs t1
  LEFT JOIN tx_outputs t2 ON (t1.covenant_name_hash = t2.covenant_name_hash AND t2.covenant_name IS NOT NULL)
WHERE t1.txid = $1
ORDER BY t1.index
`

type GetTxOutputsByTxidRow struct {
	Txid                 types.Bytes
	Index                int32
	Value                int64
	Address              string
	CovenantAction       CovenantAction
	CovenantNameHash     *types.Bytes
	CovenantHeight       *types.Bytes
	CovenantName         *types.Bytes
	CovenantBidHash      *types.Bytes
	CovenantNonce        *types.Bytes
	CovenantRecordData   *types.Bytes
	CovenantBlockHash    *types.Bytes
	CovenantVersion      *types.Bytes
	CovenantAddress      *types.Bytes
	CovenantClaimHeight  *types.Bytes
	CovenantRenewalCount *types.Bytes
	Name                 string
}

func (q *Queries) GetTxOutputsByTxid(ctx context.Context, txid types.Bytes) ([]GetTxOutputsByTxidRow, error) {
	rows, err := q.db.QueryContext(ctx, getTxOutputsByTxid, txid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTxOutputsByTxidRow{}
	for rows.Next() {
		var i GetTxOutputsByTxidRow
		if err := rows.Scan(
			&i.Txid,
			&i.Index,
			&i.Value,
			&i.Address,
			&i.CovenantAction,
			&i.CovenantNameHash,
			&i.CovenantHeight,
			&i.CovenantName,
			&i.CovenantBidHash,
			&i.CovenantNonce,
			&i.CovenantRecordData,
			&i.CovenantBlockHash,
			&i.CovenantVersion,
			&i.CovenantAddress,
			&i.CovenantClaimHeight,
			&i.CovenantRenewalCount,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTxOutput = `-- name: InsertTxOutput :exec
INSERT INTO tx_outputs (txid, index, value, address, covenant_action, covenant_name_hash, covenant_height, covenant_name, covenant_bid_hash, covenant_nonce, covenant_record_data, covenant_block_hash, covenant_version, covenant_address, covenant_claim_height, covenant_renewal_count)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)
`

type InsertTxOutputParams struct {
	Txid                 types.Bytes
	Index                int32
	Value                int64
	Address              string
	CovenantAction       CovenantAction
	CovenantNameHash     *types.Bytes
	CovenantHeight       *types.Bytes
	CovenantName         *types.Bytes
	CovenantBidHash      *types.Bytes
	CovenantNonce        *types.Bytes
	CovenantRecordData   *types.Bytes
	CovenantBlockHash    *types.Bytes
	CovenantVersion      *types.Bytes
	CovenantAddress      *types.Bytes
	CovenantClaimHeight  *types.Bytes
	CovenantRenewalCount *types.Bytes
}

func (q *Queries) InsertTxOutput(ctx context.Context, arg InsertTxOutputParams) error {
	_, err := q.db.ExecContext(ctx, insertTxOutput,
		arg.Txid,
		arg.Index,
		arg.Value,
		arg.Address,
		arg.CovenantAction,
		arg.CovenantNameHash,
		arg.CovenantHeight,
		arg.CovenantName,
		arg.CovenantBidHash,
		arg.CovenantNonce,
		arg.CovenantRecordData,
		arg.CovenantBlockHash,
		arg.CovenantVersion,
		arg.CovenantAddress,
		arg.CovenantClaimHeight,
		arg.CovenantRenewalCount,
	)
	return err
}
