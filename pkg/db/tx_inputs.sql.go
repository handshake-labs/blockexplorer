// Code generated by sqlc. DO NOT EDIT.
// source: tx_inputs.sql

package db

import (
	"context"

	"github.com/handshake-labs/blockexplorer/pkg/types"
)

const getTxInputsByTxHash = `-- name: GetTxInputsByTxHash :many
SELECT txid, index, hash_prevout, index_prevout, sequence, block_hash
FROM tx_inputs
WHERE txid = $1
ORDER BY index
`

func (q *Queries) GetTxInputsByTxHash(ctx context.Context, txid types.Bytes) ([]TxInput, error) {
	rows, err := q.db.QueryContext(ctx, getTxInputsByTxHash, txid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TxInput{}
	for rows.Next() {
		var i TxInput
		if err := rows.Scan(
			&i.Txid,
			&i.Index,
			&i.HashPrevout,
			&i.IndexPrevout,
			&i.Sequence,
			&i.BlockHash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTxInput = `-- name: InsertTxInput :exec
INSERT INTO tx_inputs (txid, index, hash_prevout, index_prevout, sequence, block_hash)
VALUES ($1, $2, $3, $4, $5, $6)
`

type InsertTxInputParams struct {
	Txid         types.Bytes
	Index        int64
	HashPrevout  types.Bytes
	IndexPrevout int64
	Sequence     int64
	BlockHash    types.Bytes
}

func (q *Queries) InsertTxInput(ctx context.Context, arg InsertTxInputParams) error {
	_, err := q.db.ExecContext(ctx, insertTxInput,
		arg.Txid,
		arg.Index,
		arg.HashPrevout,
		arg.IndexPrevout,
		arg.Sequence,
		arg.BlockHash,
	)
	return err
}
