// Code generated by sqlc. DO NOT EDIT.
// source: transactions.sql

package db

import (
	"context"

	"github.com/handshake-labs/blockexplorer/pkg/types"
)

const getTransactionsByBlockHash = `-- name: GetTransactionsByBlockHash :many
SELECT hash, block_hash, witness_tx, fee, rate, version, locktime, size, (COUNT(*) OVER())::smallint as count
FROM transactions
WHERE block_hash = $1::bytea
ORDER BY hash
LIMIT $3::smallint OFFSET $2::smallint
`

type GetTransactionsByBlockHashParams struct {
	BlockHash types.Bytes
	Offset    int16
	Limit     int16
}

type GetTransactionsByBlockHashRow struct {
	Hash      types.Bytes
	BlockHash types.Bytes
	WitnessTx types.Bytes
	Fee       int64
	Rate      int64
	Version   int32
	Locktime  int32
	Size      int64
	Count     int16
}

func (q *Queries) GetTransactionsByBlockHash(ctx context.Context, arg GetTransactionsByBlockHashParams) ([]GetTransactionsByBlockHashRow, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByBlockHash, arg.BlockHash, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTransactionsByBlockHashRow{}
	for rows.Next() {
		var i GetTransactionsByBlockHashRow
		if err := rows.Scan(
			&i.Hash,
			&i.BlockHash,
			&i.WitnessTx,
			&i.Fee,
			&i.Rate,
			&i.Version,
			&i.Locktime,
			&i.Size,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTransaction = `-- name: InsertTransaction :exec
INSERT INTO transactions (hash, block_hash, witness_tx, fee, rate, version, locktime, size)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type InsertTransactionParams struct {
	Hash      types.Bytes
	BlockHash types.Bytes
	WitnessTx types.Bytes
	Fee       int64
	Rate      int64
	Version   int32
	Locktime  int32
	Size      int64
}

func (q *Queries) InsertTransaction(ctx context.Context, arg InsertTransactionParams) error {
	_, err := q.db.ExecContext(ctx, insertTransaction,
		arg.Hash,
		arg.BlockHash,
		arg.WitnessTx,
		arg.Fee,
		arg.Rate,
		arg.Version,
		arg.Locktime,
		arg.Size,
	)
	return err
}
