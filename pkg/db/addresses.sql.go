// Code generated by sqlc. DO NOT EDIT.
// source: addresses.sql

package db

import (
	"context"

	"github.com/handshake-labs/blockexplorer/pkg/types"
)

const getAddressInfo = `-- name: GetAddressInfo :one
SELECT
  COALESCE(SUM(tx_outputs.value), 0)::bigint AS value_total,
  COALESCE(SUM(tx_outputs.value) filter (WHERE tx_inputs.txid IS NOT NULL), 0)::bigint AS value_used,
  COUNT(*) AS tx_outputs_total,
  COUNT(tx_inputs.*) AS tx_outputs_used
FROM tx_outputs
LEFT JOIN tx_inputs ON tx_outputs.txid = tx_inputs.hash_prevout AND tx_outputs.index = tx_inputs.index_prevout
WHERE tx_outputs.address = $1::text
`

type GetAddressInfoRow struct {
	ValueTotal     int64
	ValueUsed      int64
	TxOutputsTotal int64
	TxOutputsUsed  int64
}

func (q *Queries) GetAddressInfo(ctx context.Context, address string) (GetAddressInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getAddressInfo, address)
	var i GetAddressInfoRow
	err := row.Scan(
		&i.ValueTotal,
		&i.ValueUsed,
		&i.TxOutputsTotal,
		&i.TxOutputsUsed,
	)
	return i, err
}

const getTxOutputsByAddress = `-- name: GetTxOutputsByAddress :many
SELECT
  DISTINCT tx_outputs.txid, tx_outputs.index, tx_outputs.value, tx_outputs.address, tx_outputs.covenant_action, tx_outputs.covenant_name_hash, tx_outputs.covenant_height, tx_outputs.covenant_name, tx_outputs.covenant_bid_hash, tx_outputs.covenant_nonce, tx_outputs.covenant_record_data, tx_outputs.covenant_block_hash, tx_outputs.covenant_version, tx_outputs.covenant_address, tx_outputs.covenant_claim_height, tx_outputs.covenant_renewal_count,
  COALESCE(tx_inputs.txid, '') AS spend_txid,
  COALESCE(tx_inputs.index, -1) AS spend_index,
  blocks.height AS height,
  COALESCE(CONVERT_FROM(t2.covenant_name, 'SQL_ASCII'), '')::text AS name
FROM tx_outputs
LEFT JOIN tx_outputs t2 ON (tx_outputs.covenant_name_hash = t2.covenant_name_hash AND t2.covenant_name IS NOT NULL)
LEFT JOIN tx_inputs ON tx_outputs.txid = tx_inputs.hash_prevout AND tx_outputs.index = tx_inputs.index_prevout
JOIN transactions ON tx_outputs.txid = transactions.txid
JOIN blocks ON transactions.block_hash = blocks.hash
WHERE tx_outputs.address = $1::text
ORDER BY blocks.height DESC 
LIMIT $3::integer OFFSET $2::integer
`

type GetTxOutputsByAddressParams struct {
	Address string
	Offset  int32
	Limit   int32
}

type GetTxOutputsByAddressRow struct {
	Txid                 types.Bytes
	Index                int32
	Value                int64
	Address              string
	CovenantAction       CovenantAction
	CovenantNameHash     *types.Bytes
	CovenantHeight       *types.Bytes
	CovenantName         *types.Bytes
	CovenantBidHash      *types.Bytes
	CovenantNonce        *types.Bytes
	CovenantRecordData   *types.Bytes
	CovenantBlockHash    *types.Bytes
	CovenantVersion      *types.Bytes
	CovenantAddress      *types.Bytes
	CovenantClaimHeight  *types.Bytes
	CovenantRenewalCount *types.Bytes
	SpendTxid            types.Bytes
	SpendIndex           int64
	Height               int32
	Name                 string
}

func (q *Queries) GetTxOutputsByAddress(ctx context.Context, arg GetTxOutputsByAddressParams) ([]GetTxOutputsByAddressRow, error) {
	rows, err := q.db.QueryContext(ctx, getTxOutputsByAddress, arg.Address, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTxOutputsByAddressRow{}
	for rows.Next() {
		var i GetTxOutputsByAddressRow
		if err := rows.Scan(
			&i.Txid,
			&i.Index,
			&i.Value,
			&i.Address,
			&i.CovenantAction,
			&i.CovenantNameHash,
			&i.CovenantHeight,
			&i.CovenantName,
			&i.CovenantBidHash,
			&i.CovenantNonce,
			&i.CovenantRecordData,
			&i.CovenantBlockHash,
			&i.CovenantVersion,
			&i.CovenantAddress,
			&i.CovenantClaimHeight,
			&i.CovenantRenewalCount,
			&i.SpendTxid,
			&i.SpendIndex,
			&i.Height,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
