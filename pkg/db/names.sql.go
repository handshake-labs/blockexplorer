// Code generated by sqlc. DO NOT EDIT.
// source: names.sql

package db

import (
	"context"

	"github.com/handshake-labs/blockexplorer/pkg/types"
)

const getAuctionHistoryByNameHash = `-- name: GetAuctionHistoryByNameHash :many





SELECT name, origin_name, name_hash, claim_amount FROM reserved_names WHERE name = $1
`

// get auction history of a name with reveals, input parameter - hash of the name
// SELECT * FROM auctions WHERE covenant_name_hash=$1 ORDER BY height DESC;
// get auction history of a name with reveals, input parameter - the name
// SELECT * FROM auctions WHERE covenant_name=$1 ORDER BY height DESC;
// SELECT * FROM names ORDER BY max_lockup desc;
// SELECT height, covenant_record_data FROM records WHERE covenant_name_hash = $1 ORDER BY height DESC;
func (q *Queries) GetAuctionHistoryByNameHash(ctx context.Context, name types.Bytes) ([]ReservedName, error) {
	rows, err := q.db.QueryContext(ctx, getAuctionHistoryByNameHash, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReservedName{}
	for rows.Next() {
		var i ReservedName
		if err := rows.Scan(
			&i.Name,
			&i.OriginName,
			&i.NameHash,
			&i.ClaimAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReservedByNameHash = `-- name: GetReservedByNameHash :one
SELECT name, origin_name, name_hash, claim_amount FROM reserved_names WHERE name_hash = $1
`

func (q *Queries) GetReservedByNameHash(ctx context.Context, nameHash types.Bytes) (ReservedName, error) {
	row := q.db.QueryRowContext(ctx, getReservedByNameHash, nameHash)
	var i ReservedName
	err := row.Scan(
		&i.Name,
		&i.OriginName,
		&i.NameHash,
		&i.ClaimAmount,
	)
	return i, err
}
